name: "terraform-iac"
on:
  push:
    branches:
      - main
      - stage
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
env:
  # credentials needed to deploy application to AWS
  AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  # bucket for storing our backend statefile

  BUCKET_TF_STATE: ${{secrets.BUCKET_TF_STATE}}
  # aws ECR container registry to manage our container images

  REGISTRY: ${{secrets.REGISTRY}}
  AWS_REGION: us-east-1
  EKS_CLUSTER: GitOps-eks
jobs:
  terraform:
    name: "terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: checkout source code
        uses: actions/checkout@v4
      - name: setup teraform with version runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.3 # Specify the required version
      - name: terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
      - name: terraform format
        id: format
        run: terraform fmt -check
      - name: terraform validate
        id: valid
        run: terraform validate
      - name: terraform plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
      - name: terraform plan validate
        id: validate
        if: steps.plan == failure()
        run: exit 1
      - name: terraform apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile
      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          EKS_CLUSTER: GitOps-eks
      - name: get kubeconfig file
        id: config
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --region ${{env.AWS_REGION}} --name {{env.EKS_CLUSTER}}
      - name: install ingress controller
        if: steps.apply.outcome == 'success' && steps.oonfig.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml
